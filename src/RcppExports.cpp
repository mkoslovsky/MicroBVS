// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dm_lm_bvs
List dm_lm_bvs(int iterations, int thin, arma::mat alpha, arma::vec y, arma::mat z, arma::mat x, arma::cube phi, arma::cube psi, arma::mat temp_cc, arma::vec temp_uu, double sigma2_alpha, arma::cube zeta, arma::mat xi, double sigma2_phi, double a, double b, double a_0, double b_0, double h_alpha, double h_beta, double a_m, double b_m, String prior, arma::cube Omega, arma::cube G, arma::cube Var, arma::mat S, double v0, double v1, double a_G, double b_G, double pie, double lambda, double rate);
RcppExport SEXP _MicroBVS_dm_lm_bvs(SEXP iterationsSEXP, SEXP thinSEXP, SEXP alphaSEXP, SEXP ySEXP, SEXP zSEXP, SEXP xSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP temp_ccSEXP, SEXP temp_uuSEXP, SEXP sigma2_alphaSEXP, SEXP zetaSEXP, SEXP xiSEXP, SEXP sigma2_phiSEXP, SEXP aSEXP, SEXP bSEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP h_alphaSEXP, SEXP h_betaSEXP, SEXP a_mSEXP, SEXP b_mSEXP, SEXP priorSEXP, SEXP OmegaSEXP, SEXP GSEXP, SEXP VarSEXP, SEXP SSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP a_GSEXP, SEXP b_GSEXP, SEXP pieSEXP, SEXP lambdaSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type temp_cc(temp_ccSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type temp_uu(temp_uuSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_alpha(sigma2_alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_phi(sigma2_phiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type h_alpha(h_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type h_beta(h_betaSEXP);
    Rcpp::traits::input_parameter< double >::type a_m(a_mSEXP);
    Rcpp::traits::input_parameter< double >::type b_m(b_mSEXP);
    Rcpp::traits::input_parameter< String >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Var(VarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< double >::type a_G(a_GSEXP);
    Rcpp::traits::input_parameter< double >::type b_G(b_GSEXP);
    Rcpp::traits::input_parameter< double >::type pie(pieSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(dm_lm_bvs(iterations, thin, alpha, y, z, x, phi, psi, temp_cc, temp_uu, sigma2_alpha, zeta, xi, sigma2_phi, a, b, a_0, b_0, h_alpha, h_beta, a_m, b_m, prior, Omega, G, Var, S, v0, v1, a_G, b_G, pie, lambda, rate));
    return rcpp_result_gen;
END_RCPP
}
// dm_lm_bvs_full
List dm_lm_bvs_full(int iterations, int thin, arma::mat alpha, arma::vec y, arma::mat z, arma::mat x, arma::cube phi, arma::cube psi, arma::mat temp_cc, arma::vec temp_uu, arma::mat beta, arma::vec sigma2, double sigma2_alpha, arma::cube zeta, arma::mat xi, double sigma2_phi, double a, double b, double a_0, double b_0, double h_alpha, double h_beta, double a_m, double b_m, String prior, arma::cube Omega, arma::cube G, arma::cube Var, arma::mat S, double v0, double v1, double a_G, double b_G, double pie, double lambda, double rate);
RcppExport SEXP _MicroBVS_dm_lm_bvs_full(SEXP iterationsSEXP, SEXP thinSEXP, SEXP alphaSEXP, SEXP ySEXP, SEXP zSEXP, SEXP xSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP temp_ccSEXP, SEXP temp_uuSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP sigma2_alphaSEXP, SEXP zetaSEXP, SEXP xiSEXP, SEXP sigma2_phiSEXP, SEXP aSEXP, SEXP bSEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP h_alphaSEXP, SEXP h_betaSEXP, SEXP a_mSEXP, SEXP b_mSEXP, SEXP priorSEXP, SEXP OmegaSEXP, SEXP GSEXP, SEXP VarSEXP, SEXP SSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP a_GSEXP, SEXP b_GSEXP, SEXP pieSEXP, SEXP lambdaSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type temp_cc(temp_ccSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type temp_uu(temp_uuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_alpha(sigma2_alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_phi(sigma2_phiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type h_alpha(h_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type h_beta(h_betaSEXP);
    Rcpp::traits::input_parameter< double >::type a_m(a_mSEXP);
    Rcpp::traits::input_parameter< double >::type b_m(b_mSEXP);
    Rcpp::traits::input_parameter< String >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Var(VarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< double >::type a_G(a_GSEXP);
    Rcpp::traits::input_parameter< double >::type b_G(b_GSEXP);
    Rcpp::traits::input_parameter< double >::type pie(pieSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(dm_lm_bvs_full(iterations, thin, alpha, y, z, x, phi, psi, temp_cc, temp_uu, beta, sigma2, sigma2_alpha, zeta, xi, sigma2_phi, a, b, a_0, b_0, h_alpha, h_beta, a_m, b_m, prior, Omega, G, Var, S, v0, v1, a_G, b_G, pie, lambda, rate));
    return rcpp_result_gen;
END_RCPP
}
// dm_bvs
List dm_bvs(int iterations, int thin, arma::mat alpha, arma::mat z, arma::mat x, arma::cube phi, arma::mat temp_cc, arma::vec temp_uu, double sigma2_alpha, arma::cube zeta, double sigma2_phi, String prior, double a, double b, arma::cube Omega, arma::cube G, arma::cube Var, arma::mat S, double v0, double v1, double a_G, double b_G, double pie, double lambda);
RcppExport SEXP _MicroBVS_dm_bvs(SEXP iterationsSEXP, SEXP thinSEXP, SEXP alphaSEXP, SEXP zSEXP, SEXP xSEXP, SEXP phiSEXP, SEXP temp_ccSEXP, SEXP temp_uuSEXP, SEXP sigma2_alphaSEXP, SEXP zetaSEXP, SEXP sigma2_phiSEXP, SEXP priorSEXP, SEXP aSEXP, SEXP bSEXP, SEXP OmegaSEXP, SEXP GSEXP, SEXP VarSEXP, SEXP SSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP a_GSEXP, SEXP b_GSEXP, SEXP pieSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type temp_cc(temp_ccSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type temp_uu(temp_uuSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_alpha(sigma2_alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_phi(sigma2_phiSEXP);
    Rcpp::traits::input_parameter< String >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Var(VarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< double >::type a_G(a_GSEXP);
    Rcpp::traits::input_parameter< double >::type b_G(b_GSEXP);
    Rcpp::traits::input_parameter< double >::type pie(pieSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(dm_bvs(iterations, thin, alpha, z, x, phi, temp_cc, temp_uu, sigma2_alpha, zeta, sigma2_phi, prior, a, b, Omega, G, Var, S, v0, v1, a_G, b_G, pie, lambda));
    return rcpp_result_gen;
END_RCPP
}
// wang
List wang(int iterations, int thin, arma::mat x, arma::cube Omega, arma::cube G, arma::cube Var, arma::mat S, double v0, double v1, double pie, double lambda);
RcppExport SEXP _MicroBVS_wang(SEXP iterationsSEXP, SEXP thinSEXP, SEXP xSEXP, SEXP OmegaSEXP, SEXP GSEXP, SEXP VarSEXP, SEXP SSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP pieSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Var(VarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< double >::type pie(pieSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(wang(iterations, thin, x, Omega, G, Var, S, v0, v1, pie, lambda));
    return rcpp_result_gen;
END_RCPP
}
// DTMbvs
List DTMbvs(int iterations, int thin, String prior, arma::mat x, arma::vec branch_location, List node_children_pointer, arma::mat branch_counts, arma::mat subtree_counts, arma::mat alpha, arma::cube phi, arma::cube zeta, double sigma2_alpha, double sigma2_phi, double aa, double bb, arma::cube Omega, arma::cube G, arma::cube Var, arma::mat S, double v0, double v1, double a_G, double b_G, double pie, double lambda);
RcppExport SEXP _MicroBVS_DTMbvs(SEXP iterationsSEXP, SEXP thinSEXP, SEXP priorSEXP, SEXP xSEXP, SEXP branch_locationSEXP, SEXP node_children_pointerSEXP, SEXP branch_countsSEXP, SEXP subtree_countsSEXP, SEXP alphaSEXP, SEXP phiSEXP, SEXP zetaSEXP, SEXP sigma2_alphaSEXP, SEXP sigma2_phiSEXP, SEXP aaSEXP, SEXP bbSEXP, SEXP OmegaSEXP, SEXP GSEXP, SEXP VarSEXP, SEXP SSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP a_GSEXP, SEXP b_GSEXP, SEXP pieSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< String >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type branch_location(branch_locationSEXP);
    Rcpp::traits::input_parameter< List >::type node_children_pointer(node_children_pointerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type branch_counts(branch_countsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type subtree_counts(subtree_countsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_alpha(sigma2_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_phi(sigma2_phiSEXP);
    Rcpp::traits::input_parameter< double >::type aa(aaSEXP);
    Rcpp::traits::input_parameter< double >::type bb(bbSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Var(VarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< double >::type a_G(a_GSEXP);
    Rcpp::traits::input_parameter< double >::type b_G(b_GSEXP);
    Rcpp::traits::input_parameter< double >::type pie(pieSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(DTMbvs(iterations, thin, prior, x, branch_location, node_children_pointer, branch_counts, subtree_counts, alpha, phi, zeta, sigma2_alpha, sigma2_phi, aa, bb, Omega, G, Var, S, v0, v1, a_G, b_G, pie, lambda));
    return rcpp_result_gen;
END_RCPP
}
// ilr_fun_cpp
arma::mat ilr_fun_cpp(arma::mat x);
RcppExport SEXP _MicroBVS_ilr_fun_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ilr_fun_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// log_post
arma::vec log_post(int iterations, arma::mat alpha, arma::vec y, arma::mat z, arma::mat x, arma::cube phi, arma::cube psi, double sigma2_alpha, arma::cube zeta, arma::mat xi, double sigma2_phi, double a, double b, double a_0, double b_0, double h_alpha, double h_beta, double a_m, double b_m);
RcppExport SEXP _MicroBVS_log_post(SEXP iterationsSEXP, SEXP alphaSEXP, SEXP ySEXP, SEXP zSEXP, SEXP xSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP sigma2_alphaSEXP, SEXP zetaSEXP, SEXP xiSEXP, SEXP sigma2_phiSEXP, SEXP aSEXP, SEXP bSEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP h_alphaSEXP, SEXP h_betaSEXP, SEXP a_mSEXP, SEXP b_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_alpha(sigma2_alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_phi(sigma2_phiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type h_alpha(h_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type h_beta(h_betaSEXP);
    Rcpp::traits::input_parameter< double >::type a_m(a_mSEXP);
    Rcpp::traits::input_parameter< double >::type b_m(b_mSEXP);
    rcpp_result_gen = Rcpp::wrap(log_post(iterations, alpha, y, z, x, phi, psi, sigma2_alpha, zeta, xi, sigma2_phi, a, b, a_0, b_0, h_alpha, h_beta, a_m, b_m));
    return rcpp_result_gen;
END_RCPP
}
// loo_prep
arma::mat loo_prep(arma::vec y, arma::cube psi, arma::mat xi, double a_0, double b_0, double h_alpha, double h_beta);
RcppExport SEXP _MicroBVS_loo_prep(SEXP ySEXP, SEXP psiSEXP, SEXP xiSEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP h_alphaSEXP, SEXP h_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type h_alpha(h_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type h_beta(h_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(loo_prep(y, psi, xi, a_0, b_0, h_alpha, h_beta));
    return rcpp_result_gen;
END_RCPP
}
// log_zeta_pj_cpp
double log_zeta_pj_cpp(double t_pj, double a, double b);
RcppExport SEXP _MicroBVS_log_zeta_pj_cpp(SEXP t_pjSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t_pj(t_pjSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(log_zeta_pj_cpp(t_pj, a, b));
    return rcpp_result_gen;
END_RCPP
}
// dm_lm_med
List dm_lm_med(int iterations, int thin, arma::mat alpha, arma::vec y, arma::mat z, arma::mat x, arma::cube phi, arma::cube psi, arma::mat temp_cc, arma::vec temp_uu, arma::vec sigma2, double sigma2_alpha, arma::cube zeta, arma::mat xi, arma::mat beta, double sigma2_phi, double a, double b, double a_0, double b_0, double h_alpha, double h_beta, double a_m, double b_m, double rate);
RcppExport SEXP _MicroBVS_dm_lm_med(SEXP iterationsSEXP, SEXP thinSEXP, SEXP alphaSEXP, SEXP ySEXP, SEXP zSEXP, SEXP xSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP temp_ccSEXP, SEXP temp_uuSEXP, SEXP sigma2SEXP, SEXP sigma2_alphaSEXP, SEXP zetaSEXP, SEXP xiSEXP, SEXP betaSEXP, SEXP sigma2_phiSEXP, SEXP aSEXP, SEXP bSEXP, SEXP a_0SEXP, SEXP b_0SEXP, SEXP h_alphaSEXP, SEXP h_betaSEXP, SEXP a_mSEXP, SEXP b_mSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type temp_cc(temp_ccSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type temp_uu(temp_uuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_alpha(sigma2_alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_phi(sigma2_phiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< double >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< double >::type h_alpha(h_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type h_beta(h_betaSEXP);
    Rcpp::traits::input_parameter< double >::type a_m(a_mSEXP);
    Rcpp::traits::input_parameter< double >::type b_m(b_mSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(dm_lm_med(iterations, thin, alpha, y, z, x, phi, psi, temp_cc, temp_uu, sigma2, sigma2_alpha, zeta, xi, beta, sigma2_phi, a, b, a_0, b_0, h_alpha, h_beta, a_m, b_m, rate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MicroBVS_dm_lm_bvs", (DL_FUNC) &_MicroBVS_dm_lm_bvs, 34},
    {"_MicroBVS_dm_lm_bvs_full", (DL_FUNC) &_MicroBVS_dm_lm_bvs_full, 36},
    {"_MicroBVS_dm_bvs", (DL_FUNC) &_MicroBVS_dm_bvs, 24},
    {"_MicroBVS_wang", (DL_FUNC) &_MicroBVS_wang, 11},
    {"_MicroBVS_DTMbvs", (DL_FUNC) &_MicroBVS_DTMbvs, 25},
    {"_MicroBVS_ilr_fun_cpp", (DL_FUNC) &_MicroBVS_ilr_fun_cpp, 1},
    {"_MicroBVS_log_post", (DL_FUNC) &_MicroBVS_log_post, 19},
    {"_MicroBVS_loo_prep", (DL_FUNC) &_MicroBVS_loo_prep, 7},
    {"_MicroBVS_log_zeta_pj_cpp", (DL_FUNC) &_MicroBVS_log_zeta_pj_cpp, 3},
    {"_MicroBVS_dm_lm_med", (DL_FUNC) &_MicroBVS_dm_lm_med, 25},
    {NULL, NULL, 0}
};

RcppExport void R_init_MicroBVS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
